;; Network

(defpoll wifi
    :interval "2s"
    "scripts/network.sh"
)

(defpoll wifi_scan
  :interval "20s"
  "./scripts/getWifiNetworks.sh"
)

(defvar wifi_menu_open false)
(defvar ssid "")
(defvar wifiFocused false)
(defvar wifiClickd true)
(defvar showWifi false)


;; Wifi button for system menu
(defwidget network_button []
  (box
    :space-evenly true
    :class "multi-menu-button"
    (eventbox
      :hexpand true
      :class "menu-sub-button menu-sub-button-left"
      :cursor "pointer"
      :onclick "scripts/toggleWifi.sh"
      :height {widgetSize}
      (wifi)
    )
    (eventbox
      :hexpand true
      :class "menu-sub-button menu-sub-button-right"
      :cursor "pointer"
      :onclick "scripts/toggleWifiMenu.sh"
      :height {widgetSize}
      (label :text ">")
    )
  )
)

;; Wifi ssid and icon
(defwidget wifi []
  (overlay
    (label
      :class "wifi wifi-bg icon"
      :text "${wifi.bg}"
    )
    (label
      :class {wifi.status == "true" ? "wifi icon" : "wifi icon off"}
      :text "${wifi.icon}"
    )
  )
)


(defwidget wifi_list []
  (box
    :orientation "v"
    :space-evenly false
    (label
      :text "${ssid}"
    )

    ;; Current connected network
    (box
      :orientation "v"
      :space-evenly false
      (eventbox
        ;;:class "wifi-network"
        (box
          :space-evenly false
          :class "wifi-network-label"
          :spacing 10 
          (box
            :halign "end"
            :space-evenly false
            :spacing 8
            (wifi)
            (label
              :height 40
              :halign "end"
              :text "${wifi.ssid}" 
            )
          )
        )
      )
    )

    ;; Horizontal Line
    (box
      :height 2 
      :class "horizontal-line"
    )

    ;; List of found networks
    (scroll
      :height 660
      (box
        :orientation "v"
        :spacing 0
        :space-evenly false
        (for network in wifi_scan
          (box
            :orientation "v"
            :space-evenly false
            (eventbox
              :cursor "pointer"
              :class "wifi-network"
              :onclick {ssid == "" ? "eww update ssid='${network.ssid}'" : "eww update ssid=''"}
              (box
                :space-evenly false
                :class "wifi-network-label"
                :spacing 10 
                (overlay
                  (label
                    :class "icon wifi wifi-bg"
                    :text "${network.icon_bg}"
                  )
                  (label
                    :class "icon wifi"
                    :text "${network.icon}"
                  )
                )
                (label
                  :text "${network.ssid}"
                )
                (label
                  :text "${network.status}"
                )
              )
            )
            ;; Password entry
            (revealer
              :reveal {network.ssid == ssid ? true : false}
              :height 0
              :transition "slidedown"
              :duration "100ms"
              (box
                :class "password-container"
                :orientation "h"
                :space-evenly false
                (label
                  :text "Password:  "
                )
                (input
                  :hexpand true
                  :class "password-entry"
                  :value ""
                  :password true
                  :onaccept "nmcli dev wifi connect ${ssid} password {}"
                )
              )
            )
          )
        )
      )
    )
  )
)

(defwidget back_button []
  (eventbox
  :cursor "pointer"
    (button
      :class "back-button"
      :onclick "scripts/toggleWifiMenu.sh"
      :height 48
      :width 48
      "‚óÅ"
    )
  )
)

(defwindow wifi_menu
  :monitor 0
  :windowtype "normal"
  :focusable false
  :geometry (geometry :x "1%"
                      :y "1%"
                      :width "22%"
                      :height "400px"
                      :anchor "top right")
  (box
    :orientation "v"
    :space-evenly false
    :spacing 8
    :class "system-menu-container-base"
    (centerbox
      (box
        :space-evenly false
        (back_button)
        (label
          :text "Wi-Fi"
          :height 40
          :halign "start"
          :class "sub-menu-label"
          :space-evenly false
        )
      )
      ;; dummy label
      (label
        :text "" 
      )
      (box
        :halign "end"
        :space-evenly false
        :spacing 8
        (wifi)
        (label
          :class "wifi-ssid"
          :height 40
          :halign "end"
          :text "${wifi.ssid}" 
        )
      )
    )
    (box
      :height 2 
      :class "horizontal-line"
    )
    (wifi_list)
  )
)


;; Wifi menu container

(defwidget wifi_menu_container []
  (box
    :visible {showWifi}
    :width 330
    :height 660
    :orientation "v"
    :space-evenly false
    :spacing 8
    :class "system-menu-container-base"
    (centerbox
      (box
        :space-evenly false
        (back_button)
        (label
          :text "Wi-Fi"
          :height 40
          :halign "start"
          :class "sub-menu-label"
          :space-evenly false
        )
      )
      ;; dummy label
      (label
        :text "" 
      )
      (box
        :halign "end"
        :space-evenly false
        :spacing 8
        (wifi)
        (label
          :class "wifi-ssid"
          :height 40
          :halign "end"
          :text "${wifi.ssid}" 
        )
      )
    )
    (box
      :height 2 
      :class "horizontal-line"
    )
    (wifi_list)
  )
)
