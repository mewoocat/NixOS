import Widget from 'resource:///com/github/Aylur/ags/widget.js';
import { interval, exec } from 'resource:///com/github/Aylur/ags/utils.js';
import Variable from 'resource:///com/github/Aylur/ags/variable.js';
import Battery from 'resource:///com/github/Aylur/ags/service/battery.js';

const myLabel = Widget.Label({
    label: 'some example content',
});

/*
const myBar = Widget.Window({
    name: 'bar',
    anchor: ['left'],
    child: myLabel,
});
*/
/*
function Bar(monitor = 0) {
    const myLabel = Widget.Label({
        label: 'some example content',
    });

    interval(1000, () => {
        myLabel.label = exec('date');
    });

    const win = Widget.Window({
        monitor,
        name: `bar${monitor}`,
        anchor: ['top', 'left', 'right'],
        child: myLabel,
    });

    return win;
}
*/

const date = Variable('', {
    poll: [1000, 'date'],
});

const Bar = (monitor = 0) => Widget.Window({
    monitor,
    name: `bar${monitor}`,
    anchor: ['bottom', 'left', 'right'],
    //child: Widget.Label()
    //    .poll(1000, label => label.label = exec('date')),
    child: Widget.Label().bind('label', date),
});

// anytime myVariable.value changes
// it will send a signal
const myVariable = Variable(0);

myVariable.connect('changed', ({ value }) => {
    print('myVariable changed to ' + `${value}`);
});
/*
const bar = Widget.Window({
    name: 'bar',
    child: Widget.Label()
        .bind('label', myVariable, 'value', v => `value: ${v}`),
});
*/

myVariable.value++
myVariable.value++
myVariable.value++

const pactl = Variable({ count: 0, msg: '' }, {
    listen: ['pactl subscribe', msg => ({
        count: pactl.value.count + 1,
        msg: msg,
    })],
});

pactl.connect('changed', ({ value }) => {
    print(value.msg, value.count);
});

const label = Widget.Label()
    .bind('label', pactl, 'value', ({ count, msg }) => {
        return `${msg} ${count}`;
    });

// widgets are GObjects too
label.connect('notify::label', ({ label }) => {
    print('label changed to ', label);
});

const batteryProgress = Widget.CircularProgress({
    value: Battery.bind('percent').transform(p => p / 100),
    child: Widget.Icon({
        icon: Battery.bind('icon_name'),
    }),
});

export default { windows: [Bar(0), Bar(1)] };


// Using eventbox to fix hover and pointer issue
import Variable from 'resource:///com/github/Aylur/ags/variable.js';

import { EventBox } from 'resource:///com/github/Aylur/ags/widget.js';

const { Gtk, Gdk } = imports.gi;
const display = Gdk.Display.get_default();

import * as EventBoxTypes from 'types/widgets/eventbox';
type CursorBox = EventBoxTypes.EventBoxProps & {
    on_primary_click_release?(self: EventBoxTypes.default): void;
    on_hover?(self: EventBoxTypes.default): void;
    on_hover_lost?(self: EventBoxTypes.default): void;
};


export default ({
    on_primary_click_release = () => {/**/},
    on_hover = () => {/**/},
    on_hover_lost = () => {/**/},
    attribute,
    ...props
}: CursorBox) => {
    // Make this variable to know if the function should
    // be executed depending on where the click is released
    const CanRun = Variable(true);
    const Disabled = Variable(false);

    const cursorBox = EventBox({
        ...props,

        attribute: {
            ...attribute,
            disabled: Disabled,
        },

        on_primary_click_release: (self) => {
            // Every click, do a one shot connect to
            // CanRun to wait for location of click
            const id = CanRun.connect('changed', () => {
                if (CanRun.value && !Disabled.value) {
                    on_primary_click_release(self);
                }

                CanRun.disconnect(id);
            });
        },

    // OnHover
    }).on('enter-notify-event', (self) => {
        on_hover(self);

        self.window.set_cursor(Gdk.Cursor.new_from_name(
            display,
            Disabled.value ?
                'not-allowed' :
                'pointer',
        ));
        self.toggleClassName('hover', true);

    // OnHoverLost
    }).on('leave-notify-event', (self) => {
        on_hover_lost(self);

        self.window.set_cursor(null);
        self.toggleClassName('hover', false);

    // Disabled class
    }).hook(Disabled, (self) => {
        self.toggleClassName('disabled', Disabled.value);
    });

    const gesture = Gtk.GestureLongPress.new(cursorBox);

    cursorBox.hook(gesture, () => {
        const pointer = gesture.get_point(null);
        const x = pointer[1];
        const y = pointer[2];

        if ((!x || !y) || (x === 0 && y === 0)) {
            return;
        }

        CanRun.value = !(
            x > cursorBox.get_allocated_width() ||
            y > cursorBox.get_allocated_height()
        );
    }, 'end');

    return cursorBox;
};